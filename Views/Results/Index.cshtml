@model List<INF4001N_1814748_NVSAAY001_2024.ViewModels.ResultsViewModel>

@{
    ViewBag.Title = "Election Results";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Prepare data as a serialized JSON object
    var serializedData = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}

<h2 class="text-center">Election Results</h2>

<div class="container">
    @foreach (var election in Model)
    {
        <div class="mb-5">
            <h3 class="text-center">@election.ElectionTitle</h3>

            <p class="text-center">
                <strong>Total Votes Cast:</strong> @election.TotalVotes<br>
                <strong>Percentage of Population Voted:</strong> @election.PopulationPercentageVoted.ToString("0.00")%<br>
            </p>

            <table class="table table-bordered text-center">
                <thead>
                    <tr>
                        <th>Candidate</th>
                        <th>Percentage of Votes</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < election.CandidateNames.Count; i++)
                    {
                        <tr>
                            <td>@election.CandidateNames[i]</td>
                            <td>@election.CandidateVotePercentages[i].ToString("0.00")%</td>
                        </tr>
                    }
                </tbody>
            </table>

            <canvas id="chart-@election.ElectionTitle.Replace(" ", "-")" width="400" height="200"></canvas>
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Pass serialized data to JavaScript
        const electionsData = @Html.Raw(@serializedData);

        document.addEventListener("DOMContentLoaded", function () {
            electionsData.forEach(election => {
                // Get the canvas context
                const ctx = document.getElementById(`chart-${election.ElectionTitle.replace(/\s+/g, "-")}`).getContext("2d");

                // Prepare the image URLs for candidate photos
                const imageUrls = election.CandidatePhotos;

                // Load all images
                const images = [];
                imageUrls.forEach((url, index) => {
                    const img = new Image();
                    img.src = url;
                    images.push(img);
                });

                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: election.CandidateNames,
                        datasets: [{
                            label: 'Votes',
                            data: election.VoteCounts,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: true
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    },
                    plugins: [{
                        id: 'customLabels',
                        afterDraw: (chart) => {
                            const ctx = chart.ctx;
                            const xAxis = chart.scales.x;

                            // Draw images above each bar
                            images.forEach((img, index) => {
                                const x = xAxis.getPixelForValue(index) - 20; // Adjust for image center
                                const y = chart.scales.y.top - 50; // Position above the chart
                                ctx.drawImage(img, x, y, 40, 40); // Draw image (size 40x40)
                            });
                        }
                    }]
                });
            });
        });
    </script>
}